<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:aop="http://www.springframework.org/schema/aop"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                     http://www.springframework.org/schema/context
                     http://www.springframework.org/schema/context/spring-context-3.0.xsd
                     http://www.springframework.org/schema/aop
                     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                     http://www.springframework.org/schema/tx
                     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
                     
	<!-- 定义事务管理 -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 定义事务通知策略（建议） -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
 			<!--rollback-for="Exception":如果发生异常就回滚。read-only="true"：只读（spring进行优化，提高性能-->
 			<tx:method name="update*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="remove*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="delete*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
             <tx:method name="del*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="insert*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="move*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="add*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="save*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="send*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />            
            <tx:method name="copy*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="generate*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="check*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="modify*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="confirm*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="refuse*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="accept*" read-only="false" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="*" read-only="true"  propagation="SUPPORTS"/><!--有事务就使用事务，没有事务就不使用事务 -->
		</tx:attributes>
	</tx:advice> 
	<!-- 定义切面 -->
	<aop:config>
		<!-- service层，以及隔一层service。如：service,或者users.service,使用事务 -->
		<aop:pointcut id="bussinessService1" expression="execution(public * com.repair.*.service..*.*(..))"/>
		<aop:pointcut id="bussinessService2" expression="execution(public * com.repair.service..*.*(..))"/>
		<aop:pointcut id="bussinessService3" expression="execution(public * com.repair.util.serviceSupport.*.*(..))"/>
		<aop:advisor pointcut-ref="bussinessService1" advice-ref="txAdvice"/>
		<aop:advisor pointcut-ref="bussinessService2" advice-ref="txAdvice"/>
		<aop:advisor pointcut-ref="bussinessService3" advice-ref="txAdvice"/>
	</aop:config>


    <!-- spring 统一异常处理ExceptionAdvisor.java配置 -->
    <bean id="exceptionAdvisor" class="com.repair.util.exception.ExceptionAdvisor"></bean>
    <!-- Bean自动代理处理器配置 -->
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
    	<property name="beanNames">
    		<list>
    			<!-- 配置需要进行日志记录的Service和Dao 
    			<value>DictionaryBaseDao</value>  
    			<value>DictionaryBaseService</value>   --> 
    			<!-- 配置以下值结尾的bean -->
    			<value>*Dao</value>
    			<value>*Service</value>
    		</list>
    	</property>
    	<property name="interceptorNames">
    		<list>
    			<value>exceptionAdvisor</value>
    		</list>
    	</property>
    </bean>	

</beans>